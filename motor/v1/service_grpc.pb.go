// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: motor/v1/service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MotorService_GetDriveMotor_FullMethodName     = "/motor.v1.MotorService/GetDriveMotor"
	MotorService_GetLiftMotor_FullMethodName      = "/motor.v1.MotorService/GetLiftMotor"
	MotorService_GetCargoDoorMotor_FullMethodName = "/motor.v1.MotorService/GetCargoDoorMotor"
)

// MotorServiceClient is the client API for MotorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MotorServiceClient interface {
	// GetDriveMotor returns the current drive motor information.
	GetDriveMotor(ctx context.Context, in *GetDriveMotorRequest, opts ...grpc.CallOption) (*GetDriveMotorResponse, error)
	// GetLiftMotor returns the current lift motor information.
	GetLiftMotor(ctx context.Context, in *GetLiftMotorRequest, opts ...grpc.CallOption) (*GetLiftMotorResponse, error)
	// GetCargoDoorMotor returns the current cargo door motor information.
	GetCargoDoorMotor(ctx context.Context, in *GetCargoDoorMotorRequest, opts ...grpc.CallOption) (*GetCargoDoorMotorResponse, error)
}

type motorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMotorServiceClient(cc grpc.ClientConnInterface) MotorServiceClient {
	return &motorServiceClient{cc}
}

func (c *motorServiceClient) GetDriveMotor(ctx context.Context, in *GetDriveMotorRequest, opts ...grpc.CallOption) (*GetDriveMotorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDriveMotorResponse)
	err := c.cc.Invoke(ctx, MotorService_GetDriveMotor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *motorServiceClient) GetLiftMotor(ctx context.Context, in *GetLiftMotorRequest, opts ...grpc.CallOption) (*GetLiftMotorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLiftMotorResponse)
	err := c.cc.Invoke(ctx, MotorService_GetLiftMotor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *motorServiceClient) GetCargoDoorMotor(ctx context.Context, in *GetCargoDoorMotorRequest, opts ...grpc.CallOption) (*GetCargoDoorMotorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCargoDoorMotorResponse)
	err := c.cc.Invoke(ctx, MotorService_GetCargoDoorMotor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MotorServiceServer is the server API for MotorService service.
// All implementations must embed UnimplementedMotorServiceServer
// for forward compatibility.
type MotorServiceServer interface {
	// GetDriveMotor returns the current drive motor information.
	GetDriveMotor(context.Context, *GetDriveMotorRequest) (*GetDriveMotorResponse, error)
	// GetLiftMotor returns the current lift motor information.
	GetLiftMotor(context.Context, *GetLiftMotorRequest) (*GetLiftMotorResponse, error)
	// GetCargoDoorMotor returns the current cargo door motor information.
	GetCargoDoorMotor(context.Context, *GetCargoDoorMotorRequest) (*GetCargoDoorMotorResponse, error)
	mustEmbedUnimplementedMotorServiceServer()
}

// UnimplementedMotorServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMotorServiceServer struct{}

func (UnimplementedMotorServiceServer) GetDriveMotor(context.Context, *GetDriveMotorRequest) (*GetDriveMotorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDriveMotor not implemented")
}
func (UnimplementedMotorServiceServer) GetLiftMotor(context.Context, *GetLiftMotorRequest) (*GetLiftMotorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLiftMotor not implemented")
}
func (UnimplementedMotorServiceServer) GetCargoDoorMotor(context.Context, *GetCargoDoorMotorRequest) (*GetCargoDoorMotorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCargoDoorMotor not implemented")
}
func (UnimplementedMotorServiceServer) mustEmbedUnimplementedMotorServiceServer() {}
func (UnimplementedMotorServiceServer) testEmbeddedByValue()                      {}

// UnsafeMotorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MotorServiceServer will
// result in compilation errors.
type UnsafeMotorServiceServer interface {
	mustEmbedUnimplementedMotorServiceServer()
}

func RegisterMotorServiceServer(s grpc.ServiceRegistrar, srv MotorServiceServer) {
	// If the following call pancis, it indicates UnimplementedMotorServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MotorService_ServiceDesc, srv)
}

func _MotorService_GetDriveMotor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDriveMotorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MotorServiceServer).GetDriveMotor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MotorService_GetDriveMotor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MotorServiceServer).GetDriveMotor(ctx, req.(*GetDriveMotorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MotorService_GetLiftMotor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLiftMotorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MotorServiceServer).GetLiftMotor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MotorService_GetLiftMotor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MotorServiceServer).GetLiftMotor(ctx, req.(*GetLiftMotorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MotorService_GetCargoDoorMotor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCargoDoorMotorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MotorServiceServer).GetCargoDoorMotor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MotorService_GetCargoDoorMotor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MotorServiceServer).GetCargoDoorMotor(ctx, req.(*GetCargoDoorMotorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MotorService_ServiceDesc is the grpc.ServiceDesc for MotorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MotorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "motor.v1.MotorService",
	HandlerType: (*MotorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDriveMotor",
			Handler:    _MotorService_GetDriveMotor_Handler,
		},
		{
			MethodName: "GetLiftMotor",
			Handler:    _MotorService_GetLiftMotor_Handler,
		},
		{
			MethodName: "GetCargoDoorMotor",
			Handler:    _MotorService_GetCargoDoorMotor_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "motor/v1/service.proto",
}
