// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: raybot/v1/drive_motor.proto

package raybotv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DriveMotorService_SetDriveMotorConfiguration_FullMethodName = "/raybot.v1.DriveMotorService/SetDriveMotorConfiguration"
)

// DriveMotorServiceClient is the client API for DriveMotorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DriveMotorServiceClient interface {
	SetDriveMotorConfiguration(ctx context.Context, in *SetDriveMotorConfigurationRequest, opts ...grpc.CallOption) (*SetDriveMotorConfigurationResponse, error)
}

type driveMotorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDriveMotorServiceClient(cc grpc.ClientConnInterface) DriveMotorServiceClient {
	return &driveMotorServiceClient{cc}
}

func (c *driveMotorServiceClient) SetDriveMotorConfiguration(ctx context.Context, in *SetDriveMotorConfigurationRequest, opts ...grpc.CallOption) (*SetDriveMotorConfigurationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetDriveMotorConfigurationResponse)
	err := c.cc.Invoke(ctx, DriveMotorService_SetDriveMotorConfiguration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DriveMotorServiceServer is the server API for DriveMotorService service.
// All implementations must embed UnimplementedDriveMotorServiceServer
// for forward compatibility.
type DriveMotorServiceServer interface {
	SetDriveMotorConfiguration(context.Context, *SetDriveMotorConfigurationRequest) (*SetDriveMotorConfigurationResponse, error)
	mustEmbedUnimplementedDriveMotorServiceServer()
}

// UnimplementedDriveMotorServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDriveMotorServiceServer struct{}

func (UnimplementedDriveMotorServiceServer) SetDriveMotorConfiguration(context.Context, *SetDriveMotorConfigurationRequest) (*SetDriveMotorConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDriveMotorConfiguration not implemented")
}
func (UnimplementedDriveMotorServiceServer) mustEmbedUnimplementedDriveMotorServiceServer() {}
func (UnimplementedDriveMotorServiceServer) testEmbeddedByValue()                           {}

// UnsafeDriveMotorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DriveMotorServiceServer will
// result in compilation errors.
type UnsafeDriveMotorServiceServer interface {
	mustEmbedUnimplementedDriveMotorServiceServer()
}

func RegisterDriveMotorServiceServer(s grpc.ServiceRegistrar, srv DriveMotorServiceServer) {
	// If the following call pancis, it indicates UnimplementedDriveMotorServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DriveMotorService_ServiceDesc, srv)
}

func _DriveMotorService_SetDriveMotorConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDriveMotorConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriveMotorServiceServer).SetDriveMotorConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DriveMotorService_SetDriveMotorConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriveMotorServiceServer).SetDriveMotorConfiguration(ctx, req.(*SetDriveMotorConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DriveMotorService_ServiceDesc is the grpc.ServiceDesc for DriveMotorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DriveMotorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "raybot.v1.DriveMotorService",
	HandlerType: (*DriveMotorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetDriveMotorConfiguration",
			Handler:    _DriveMotorService_SetDriveMotorConfiguration_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "raybot/v1/drive_motor.proto",
}
