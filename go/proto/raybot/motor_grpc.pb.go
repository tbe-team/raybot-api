// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/raybot/motor.proto

package raybot

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DriveMotorService_SetConfig_FullMethodName    = "/motor.DriveMotorService/SetConfig"
	DriveMotorService_StreamStatus_FullMethodName = "/motor.DriveMotorService/StreamStatus"
)

// DriveMotorServiceClient is the client API for DriveMotorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DriveMotorServiceClient interface {
	SetConfig(ctx context.Context, in *SetConfigRequest, opts ...grpc.CallOption) (*SetConfigResponse, error)
	// Server streaming: gửi trạng thái motor liên tục về client
	StreamStatus(ctx context.Context, in *StreamStatusRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamStatusResponse], error)
}

type driveMotorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDriveMotorServiceClient(cc grpc.ClientConnInterface) DriveMotorServiceClient {
	return &driveMotorServiceClient{cc}
}

func (c *driveMotorServiceClient) SetConfig(ctx context.Context, in *SetConfigRequest, opts ...grpc.CallOption) (*SetConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetConfigResponse)
	err := c.cc.Invoke(ctx, DriveMotorService_SetConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driveMotorServiceClient) StreamStatus(ctx context.Context, in *StreamStatusRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamStatusResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DriveMotorService_ServiceDesc.Streams[0], DriveMotorService_StreamStatus_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamStatusRequest, StreamStatusResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DriveMotorService_StreamStatusClient = grpc.ServerStreamingClient[StreamStatusResponse]

// DriveMotorServiceServer is the server API for DriveMotorService service.
// All implementations must embed UnimplementedDriveMotorServiceServer
// for forward compatibility.
type DriveMotorServiceServer interface {
	SetConfig(context.Context, *SetConfigRequest) (*SetConfigResponse, error)
	// Server streaming: gửi trạng thái motor liên tục về client
	StreamStatus(*StreamStatusRequest, grpc.ServerStreamingServer[StreamStatusResponse]) error
	mustEmbedUnimplementedDriveMotorServiceServer()
}

// UnimplementedDriveMotorServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDriveMotorServiceServer struct{}

func (UnimplementedDriveMotorServiceServer) SetConfig(context.Context, *SetConfigRequest) (*SetConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetConfig not implemented")
}
func (UnimplementedDriveMotorServiceServer) StreamStatus(*StreamStatusRequest, grpc.ServerStreamingServer[StreamStatusResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamStatus not implemented")
}
func (UnimplementedDriveMotorServiceServer) mustEmbedUnimplementedDriveMotorServiceServer() {}
func (UnimplementedDriveMotorServiceServer) testEmbeddedByValue()                           {}

// UnsafeDriveMotorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DriveMotorServiceServer will
// result in compilation errors.
type UnsafeDriveMotorServiceServer interface {
	mustEmbedUnimplementedDriveMotorServiceServer()
}

func RegisterDriveMotorServiceServer(s grpc.ServiceRegistrar, srv DriveMotorServiceServer) {
	// If the following call pancis, it indicates UnimplementedDriveMotorServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DriveMotorService_ServiceDesc, srv)
}

func _DriveMotorService_SetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriveMotorServiceServer).SetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DriveMotorService_SetConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriveMotorServiceServer).SetConfig(ctx, req.(*SetConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DriveMotorService_StreamStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamStatusRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DriveMotorServiceServer).StreamStatus(m, &grpc.GenericServerStream[StreamStatusRequest, StreamStatusResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DriveMotorService_StreamStatusServer = grpc.ServerStreamingServer[StreamStatusResponse]

// DriveMotorService_ServiceDesc is the grpc.ServiceDesc for DriveMotorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DriveMotorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "motor.DriveMotorService",
	HandlerType: (*DriveMotorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetConfig",
			Handler:    _DriveMotorService_SetConfig_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamStatus",
			Handler:       _DriveMotorService_StreamStatus_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/raybot/motor.proto",
}
