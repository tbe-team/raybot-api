// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: sys/v1/service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SysService_GetSysInfo_FullMethodName    = "/sys.v1.SysService/GetSysInfo"
	SysService_GetVersion_FullMethodName    = "/sys.v1.SysService/GetVersion"
	SysService_Ping_FullMethodName          = "/sys.v1.SysService/Ping"
	SysService_Reboot_FullMethodName        = "/sys.v1.SysService/Reboot"
	SysService_StopEmergency_FullMethodName = "/sys.v1.SysService/StopEmergency"
)

// SysServiceClient is the client API for SysService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SysServiceClient interface {
	// GetSysInfo returns the system information.
	GetSysInfo(ctx context.Context, in *GetSysInfoRequest, opts ...grpc.CallOption) (*GetSysInfoResponse, error)
	// GetVersion returns the version information.
	GetVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*GetVersionResponse, error)
	// Ping returns a simple response to check if the server is running.
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	// Reboot reboots the system.
	Reboot(ctx context.Context, in *RebootRequest, opts ...grpc.CallOption) (*RebootResponse, error)
	// StopEmergency stops all motors and cancel all queued and processing commands.
	StopEmergency(ctx context.Context, in *StopEmergencyRequest, opts ...grpc.CallOption) (*StopEmergencyResponse, error)
}

type sysServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSysServiceClient(cc grpc.ClientConnInterface) SysServiceClient {
	return &sysServiceClient{cc}
}

func (c *sysServiceClient) GetSysInfo(ctx context.Context, in *GetSysInfoRequest, opts ...grpc.CallOption) (*GetSysInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSysInfoResponse)
	err := c.cc.Invoke(ctx, SysService_GetSysInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysServiceClient) GetVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*GetVersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVersionResponse)
	err := c.cc.Invoke(ctx, SysService_GetVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, SysService_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysServiceClient) Reboot(ctx context.Context, in *RebootRequest, opts ...grpc.CallOption) (*RebootResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RebootResponse)
	err := c.cc.Invoke(ctx, SysService_Reboot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysServiceClient) StopEmergency(ctx context.Context, in *StopEmergencyRequest, opts ...grpc.CallOption) (*StopEmergencyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopEmergencyResponse)
	err := c.cc.Invoke(ctx, SysService_StopEmergency_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SysServiceServer is the server API for SysService service.
// All implementations must embed UnimplementedSysServiceServer
// for forward compatibility.
type SysServiceServer interface {
	// GetSysInfo returns the system information.
	GetSysInfo(context.Context, *GetSysInfoRequest) (*GetSysInfoResponse, error)
	// GetVersion returns the version information.
	GetVersion(context.Context, *GetVersionRequest) (*GetVersionResponse, error)
	// Ping returns a simple response to check if the server is running.
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	// Reboot reboots the system.
	Reboot(context.Context, *RebootRequest) (*RebootResponse, error)
	// StopEmergency stops all motors and cancel all queued and processing commands.
	StopEmergency(context.Context, *StopEmergencyRequest) (*StopEmergencyResponse, error)
	mustEmbedUnimplementedSysServiceServer()
}

// UnimplementedSysServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSysServiceServer struct{}

func (UnimplementedSysServiceServer) GetSysInfo(context.Context, *GetSysInfoRequest) (*GetSysInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSysInfo not implemented")
}
func (UnimplementedSysServiceServer) GetVersion(context.Context, *GetVersionRequest) (*GetVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (UnimplementedSysServiceServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedSysServiceServer) Reboot(context.Context, *RebootRequest) (*RebootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reboot not implemented")
}
func (UnimplementedSysServiceServer) StopEmergency(context.Context, *StopEmergencyRequest) (*StopEmergencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopEmergency not implemented")
}
func (UnimplementedSysServiceServer) mustEmbedUnimplementedSysServiceServer() {}
func (UnimplementedSysServiceServer) testEmbeddedByValue()                    {}

// UnsafeSysServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SysServiceServer will
// result in compilation errors.
type UnsafeSysServiceServer interface {
	mustEmbedUnimplementedSysServiceServer()
}

func RegisterSysServiceServer(s grpc.ServiceRegistrar, srv SysServiceServer) {
	// If the following call pancis, it indicates UnimplementedSysServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SysService_ServiceDesc, srv)
}

func _SysService_GetSysInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSysInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServiceServer).GetSysInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysService_GetSysInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServiceServer).GetSysInfo(ctx, req.(*GetSysInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysService_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServiceServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysService_GetVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServiceServer).GetVersion(ctx, req.(*GetVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysService_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysService_Reboot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RebootRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServiceServer).Reboot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysService_Reboot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServiceServer).Reboot(ctx, req.(*RebootRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysService_StopEmergency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopEmergencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServiceServer).StopEmergency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysService_StopEmergency_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServiceServer).StopEmergency(ctx, req.(*StopEmergencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SysService_ServiceDesc is the grpc.ServiceDesc for SysService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SysService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sys.v1.SysService",
	HandlerType: (*SysServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSysInfo",
			Handler:    _SysService_GetSysInfo_Handler,
		},
		{
			MethodName: "GetVersion",
			Handler:    _SysService_GetVersion_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _SysService_Ping_Handler,
		},
		{
			MethodName: "Reboot",
			Handler:    _SysService_Reboot_Handler,
		},
		{
			MethodName: "StopEmergency",
			Handler:    _SysService_StopEmergency_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sys/v1/service.proto",
}
