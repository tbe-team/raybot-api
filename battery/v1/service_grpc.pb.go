// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: battery/v1/service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BatteryService_GetBattery_FullMethodName          = "/battery.v1.BatteryService/GetBattery"
	BatteryService_GetChargeSetting_FullMethodName    = "/battery.v1.BatteryService/GetChargeSetting"
	BatteryService_GetDischargeSetting_FullMethodName = "/battery.v1.BatteryService/GetDischargeSetting"
)

// BatteryServiceClient is the client API for BatteryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BatteryServiceClient interface {
	// GetBattery returns the current battery information.
	GetBattery(ctx context.Context, in *GetBatteryRequest, opts ...grpc.CallOption) (*GetBatteryResponse, error)
	// GetChargeSetting returns the current charge setting.
	GetChargeSetting(ctx context.Context, in *GetChargeSettingRequest, opts ...grpc.CallOption) (*GetChargeSettingResponse, error)
	// GetDischargeSetting returns the current discharge setting.
	GetDischargeSetting(ctx context.Context, in *GetDischargeSettingRequest, opts ...grpc.CallOption) (*GetDischargeSettingResponse, error)
}

type batteryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBatteryServiceClient(cc grpc.ClientConnInterface) BatteryServiceClient {
	return &batteryServiceClient{cc}
}

func (c *batteryServiceClient) GetBattery(ctx context.Context, in *GetBatteryRequest, opts ...grpc.CallOption) (*GetBatteryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBatteryResponse)
	err := c.cc.Invoke(ctx, BatteryService_GetBattery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batteryServiceClient) GetChargeSetting(ctx context.Context, in *GetChargeSettingRequest, opts ...grpc.CallOption) (*GetChargeSettingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChargeSettingResponse)
	err := c.cc.Invoke(ctx, BatteryService_GetChargeSetting_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batteryServiceClient) GetDischargeSetting(ctx context.Context, in *GetDischargeSettingRequest, opts ...grpc.CallOption) (*GetDischargeSettingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDischargeSettingResponse)
	err := c.cc.Invoke(ctx, BatteryService_GetDischargeSetting_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BatteryServiceServer is the server API for BatteryService service.
// All implementations must embed UnimplementedBatteryServiceServer
// for forward compatibility.
type BatteryServiceServer interface {
	// GetBattery returns the current battery information.
	GetBattery(context.Context, *GetBatteryRequest) (*GetBatteryResponse, error)
	// GetChargeSetting returns the current charge setting.
	GetChargeSetting(context.Context, *GetChargeSettingRequest) (*GetChargeSettingResponse, error)
	// GetDischargeSetting returns the current discharge setting.
	GetDischargeSetting(context.Context, *GetDischargeSettingRequest) (*GetDischargeSettingResponse, error)
	mustEmbedUnimplementedBatteryServiceServer()
}

// UnimplementedBatteryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBatteryServiceServer struct{}

func (UnimplementedBatteryServiceServer) GetBattery(context.Context, *GetBatteryRequest) (*GetBatteryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBattery not implemented")
}
func (UnimplementedBatteryServiceServer) GetChargeSetting(context.Context, *GetChargeSettingRequest) (*GetChargeSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChargeSetting not implemented")
}
func (UnimplementedBatteryServiceServer) GetDischargeSetting(context.Context, *GetDischargeSettingRequest) (*GetDischargeSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDischargeSetting not implemented")
}
func (UnimplementedBatteryServiceServer) mustEmbedUnimplementedBatteryServiceServer() {}
func (UnimplementedBatteryServiceServer) testEmbeddedByValue()                        {}

// UnsafeBatteryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BatteryServiceServer will
// result in compilation errors.
type UnsafeBatteryServiceServer interface {
	mustEmbedUnimplementedBatteryServiceServer()
}

func RegisterBatteryServiceServer(s grpc.ServiceRegistrar, srv BatteryServiceServer) {
	// If the following call pancis, it indicates UnimplementedBatteryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BatteryService_ServiceDesc, srv)
}

func _BatteryService_GetBattery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBatteryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatteryServiceServer).GetBattery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BatteryService_GetBattery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatteryServiceServer).GetBattery(ctx, req.(*GetBatteryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BatteryService_GetChargeSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChargeSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatteryServiceServer).GetChargeSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BatteryService_GetChargeSetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatteryServiceServer).GetChargeSetting(ctx, req.(*GetChargeSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BatteryService_GetDischargeSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDischargeSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatteryServiceServer).GetDischargeSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BatteryService_GetDischargeSetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatteryServiceServer).GetDischargeSetting(ctx, req.(*GetDischargeSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BatteryService_ServiceDesc is the grpc.ServiceDesc for BatteryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BatteryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "battery.v1.BatteryService",
	HandlerType: (*BatteryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBattery",
			Handler:    _BatteryService_GetBattery_Handler,
		},
		{
			MethodName: "GetChargeSetting",
			Handler:    _BatteryService_GetChargeSetting_Handler,
		},
		{
			MethodName: "GetDischargeSetting",
			Handler:    _BatteryService_GetDischargeSetting_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "battery/v1/service.proto",
}
