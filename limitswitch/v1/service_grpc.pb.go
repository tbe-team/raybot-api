// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: limitswitch/v1/service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LimitSwitchService_GetLimitSwitch1_FullMethodName    = "/limitswitch.v1.LimitSwitchService/GetLimitSwitch1"
	LimitSwitchService_StreamLimitSwitch1_FullMethodName = "/limitswitch.v1.LimitSwitchService/StreamLimitSwitch1"
)

// LimitSwitchServiceClient is the client API for LimitSwitchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LimitSwitchServiceClient interface {
	// GetLimitSwitch1 returns the current status of limit switch 1.
	// This limit switch is physically mounted on the cargo box.
	// It is used to detect whether the cargo has been inserted or removed correctly —
	// serving as a confirmation sensor during the delivery or pickup process.
	GetLimitSwitch1(ctx context.Context, in *GetLimitSwitch1Request, opts ...grpc.CallOption) (*GetLimitSwitch1Response, error)
	// StreamLimitSwitch1 streams real-time state changes of limit switch 1.
	// Helpful for monitoring cargo interactions during the delivery cycle.
	StreamLimitSwitch1(ctx context.Context, in *StreamLimitSwitch1Request, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamLimitSwitch1Response], error)
}

type limitSwitchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLimitSwitchServiceClient(cc grpc.ClientConnInterface) LimitSwitchServiceClient {
	return &limitSwitchServiceClient{cc}
}

func (c *limitSwitchServiceClient) GetLimitSwitch1(ctx context.Context, in *GetLimitSwitch1Request, opts ...grpc.CallOption) (*GetLimitSwitch1Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLimitSwitch1Response)
	err := c.cc.Invoke(ctx, LimitSwitchService_GetLimitSwitch1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *limitSwitchServiceClient) StreamLimitSwitch1(ctx context.Context, in *StreamLimitSwitch1Request, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamLimitSwitch1Response], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &LimitSwitchService_ServiceDesc.Streams[0], LimitSwitchService_StreamLimitSwitch1_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamLimitSwitch1Request, StreamLimitSwitch1Response]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LimitSwitchService_StreamLimitSwitch1Client = grpc.ServerStreamingClient[StreamLimitSwitch1Response]

// LimitSwitchServiceServer is the server API for LimitSwitchService service.
// All implementations must embed UnimplementedLimitSwitchServiceServer
// for forward compatibility.
type LimitSwitchServiceServer interface {
	// GetLimitSwitch1 returns the current status of limit switch 1.
	// This limit switch is physically mounted on the cargo box.
	// It is used to detect whether the cargo has been inserted or removed correctly —
	// serving as a confirmation sensor during the delivery or pickup process.
	GetLimitSwitch1(context.Context, *GetLimitSwitch1Request) (*GetLimitSwitch1Response, error)
	// StreamLimitSwitch1 streams real-time state changes of limit switch 1.
	// Helpful for monitoring cargo interactions during the delivery cycle.
	StreamLimitSwitch1(*StreamLimitSwitch1Request, grpc.ServerStreamingServer[StreamLimitSwitch1Response]) error
	mustEmbedUnimplementedLimitSwitchServiceServer()
}

// UnimplementedLimitSwitchServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLimitSwitchServiceServer struct{}

func (UnimplementedLimitSwitchServiceServer) GetLimitSwitch1(context.Context, *GetLimitSwitch1Request) (*GetLimitSwitch1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLimitSwitch1 not implemented")
}
func (UnimplementedLimitSwitchServiceServer) StreamLimitSwitch1(*StreamLimitSwitch1Request, grpc.ServerStreamingServer[StreamLimitSwitch1Response]) error {
	return status.Errorf(codes.Unimplemented, "method StreamLimitSwitch1 not implemented")
}
func (UnimplementedLimitSwitchServiceServer) mustEmbedUnimplementedLimitSwitchServiceServer() {}
func (UnimplementedLimitSwitchServiceServer) testEmbeddedByValue()                            {}

// UnsafeLimitSwitchServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LimitSwitchServiceServer will
// result in compilation errors.
type UnsafeLimitSwitchServiceServer interface {
	mustEmbedUnimplementedLimitSwitchServiceServer()
}

func RegisterLimitSwitchServiceServer(s grpc.ServiceRegistrar, srv LimitSwitchServiceServer) {
	// If the following call pancis, it indicates UnimplementedLimitSwitchServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LimitSwitchService_ServiceDesc, srv)
}

func _LimitSwitchService_GetLimitSwitch1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLimitSwitch1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LimitSwitchServiceServer).GetLimitSwitch1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LimitSwitchService_GetLimitSwitch1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LimitSwitchServiceServer).GetLimitSwitch1(ctx, req.(*GetLimitSwitch1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _LimitSwitchService_StreamLimitSwitch1_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamLimitSwitch1Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LimitSwitchServiceServer).StreamLimitSwitch1(m, &grpc.GenericServerStream[StreamLimitSwitch1Request, StreamLimitSwitch1Response]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LimitSwitchService_StreamLimitSwitch1Server = grpc.ServerStreamingServer[StreamLimitSwitch1Response]

// LimitSwitchService_ServiceDesc is the grpc.ServiceDesc for LimitSwitchService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LimitSwitchService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "limitswitch.v1.LimitSwitchService",
	HandlerType: (*LimitSwitchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLimitSwitch1",
			Handler:    _LimitSwitchService_GetLimitSwitch1_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamLimitSwitch1",
			Handler:       _LimitSwitchService_StreamLimitSwitch1_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "limitswitch/v1/service.proto",
}
