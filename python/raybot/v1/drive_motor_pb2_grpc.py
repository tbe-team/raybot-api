# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from raybot.v1 import drive_motor_pb2 as raybot_dot_v1_dot_drive__motor__pb2


class DriveMotorServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SetDriveMotorConfiguration = channel.unary_unary(
                '/raybot.v1.DriveMotorService/SetDriveMotorConfiguration',
                request_serializer=raybot_dot_v1_dot_drive__motor__pb2.SetDriveMotorConfigurationRequest.SerializeToString,
                response_deserializer=raybot_dot_v1_dot_drive__motor__pb2.SetDriveMotorConfigurationResponse.FromString,
                _registered_method=True)


class DriveMotorServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SetDriveMotorConfiguration(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DriveMotorServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SetDriveMotorConfiguration': grpc.unary_unary_rpc_method_handler(
                    servicer.SetDriveMotorConfiguration,
                    request_deserializer=raybot_dot_v1_dot_drive__motor__pb2.SetDriveMotorConfigurationRequest.FromString,
                    response_serializer=raybot_dot_v1_dot_drive__motor__pb2.SetDriveMotorConfigurationResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'raybot.v1.DriveMotorService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('raybot.v1.DriveMotorService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class DriveMotorService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SetDriveMotorConfiguration(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/raybot.v1.DriveMotorService/SetDriveMotorConfiguration',
            raybot_dot_v1_dot_drive__motor__pb2.SetDriveMotorConfigurationRequest.SerializeToString,
            raybot_dot_v1_dot_drive__motor__pb2.SetDriveMotorConfigurationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
